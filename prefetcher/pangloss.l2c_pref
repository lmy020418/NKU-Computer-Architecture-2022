#include "cache.h"
#define MIN(a,b) (((a)<(b))?(a):(b))

#define DC_range_l2c (128)	
#define DC_ways_l2c 16      
#define DC_LFUmax_l2c 256  

int DC_deltanext_l2c[DC_range_l2c][DC_ways_l2c];
int DC_LFUbits_l2c[DC_range_l2c][DC_ways_l2c];  // Frequency counters

#define PC_sets_l2c 256		
#define PC_ways_l2c 12		// 12 ways
#define PC_tag_bits_l2c 10 	

int PC_ldelta_l2c[PC_sets_l2c][PC_ways_l2c]; 	
int PC_loffset_l2c[PC_sets_l2c][PC_ways_l2c];	
int PC_ptag_l2c[PC_sets_l2c][PC_ways_l2c];		
int PC_NRUbit_l2c[PC_sets_l2c][PC_ways_l2c];	

int get_page_tag_l2c(uint64_t page){
	return (page/PC_sets_l2c)&((1<<PC_tag_bits_l2c)-1);
}

void CACHE::l2c_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L2C pangloss prefetcher" << endl;

	for (int i=0; i<DC_range_l2c; i++){ 
		for (int j=0; j<DC_ways_l2c; j++){ 
			DC_deltanext_l2c[i][j]=1+DC_range_l2c/2; 
			DC_LFUbits_l2c[i][j]=0;
		}
	}
}

void update_DC_l2c(int delta_from, int delta_to) {
	int dhit = 0;
	for (int i=0; i<DC_ways_l2c; i++){
		if (DC_deltanext_l2c[delta_from][i]==delta_to){
			DC_LFUbits_l2c[delta_from][i]++;
			if (DC_LFUbits_l2c[delta_from][i]==DC_LFUmax_l2c){
				for (int j=0; j<DC_ways_l2c; j++){
					DC_LFUbits_l2c[delta_from][j]/=2;
				}
			}	
			dhit=1;			
			break;
		}
	}
	if (dhit==0){
		int min_freq=DC_LFUbits_l2c[delta_from][0];
		int min_freq_way=0;		
		for (int i=1; i<DC_ways_l2c; i++){
			if (DC_LFUbits_l2c[delta_from][i] < min_freq){
				min_freq = DC_LFUbits_l2c[delta_from][i];
				min_freq_way = i;
			}
		}
		DC_deltanext_l2c[delta_from][min_freq_way] = delta_to;
		DC_LFUbits_l2c [delta_from][min_freq_way] = 1; 
	}
}

int get_next_best_transition_l2c (int delta) {
	int probs_sum = 0;
	for (int i=0; i<DC_ways_l2c; i++){
		probs_sum += DC_LFUbits_l2c[delta][i];
	}
	int max_freq=DC_LFUbits_l2c[delta][0];
	int max_freq_way=0;	
	for (int i=1; i<DC_ways_l2c; i++){
		if (DC_LFUbits_l2c[delta][i] > max_freq){
			max_freq = DC_LFUbits_l2c[delta][i];
			max_freq_way = i;
		}
	}
	if ((float)DC_LFUbits_l2c[delta][max_freq_way]/probs_sum<1/3.0) 
		return -1;
		
	return DC_deltanext_l2c[delta][max_freq_way];
}


uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
	unsigned long long int cl_address = addr>>6;
	unsigned long long int page = cl_address>>6;
	int page_offset = cl_address&63;
	int way=-1;
	for (int i=0; i<PC_ways_l2c; i++){
		if (PC_ptag_l2c[page%PC_sets_l2c][i]==get_page_tag_l2c(page)){
			way=i;			
			break;
		}
	}
	
	int cur_delta = 1 + DC_range_l2c/2;
	int matched=0;
	if ( (way!=-1) && !((type==PREFETCH) && (cache_hit==0)) ) {
		int ldelta_l2c=PC_ldelta_l2c[page%PC_sets_l2c][way];
		int loff_l2c=PC_loffset_l2c[page%PC_sets_l2c][way];
		cur_delta = page_offset-loff_l2c + DC_range_l2c/2;
		matched=1;
		update_DC_l2c(ldelta_l2c, cur_delta);				
	} 

	int next_delta=cur_delta;
	uint64_t addr_n=addr;
	int count=0;
	int degree = (MSHR.SIZE-MSHR.occupancy)*2/3;
	if ((type==PREFETCH) && (cache_hit==0)) {
		degree/=2;
	}
	if (NUM_CPUS>1) {
		degree/=4;
	}
	for (int i_=0; i_<degree && count<degree; i_++) {	
		int best_delta = get_next_best_transition_l2c(next_delta);
		if (best_delta==-1) break;
		{		
			int sum=0;
			for (int j=0; j<DC_ways_l2c; j++) {
				sum+=DC_LFUbits_l2c[next_delta][j];
			}
			int used[DC_ways_l2c] = {0};			
			for (int i=0; i<2; i++){ 
				int max_way = -1;
				int max_value =  -1;
				for (int j=0; j<DC_ways_l2c; j++){
					if((DC_LFUbits_l2c[next_delta][j]>max_value) && (!used[j])){
						max_way = j;
						max_value = DC_LFUbits_l2c[next_delta][j];												
					}
				}					
				if (max_way == -1) continue; 
				if((count<degree) && ( (float)DC_LFUbits_l2c[next_delta][max_way]/sum > 1/3.0)){
					used[max_way]=1;
					uint64_t pf_addr = ((addr_n>>LOG2_BLOCK_SIZE)+(DC_deltanext_l2c[next_delta][max_way]-DC_range_l2c/2)) << LOG2_BLOCK_SIZE;
					unsigned long long int pf_page = pf_addr>>12;
					if (page==pf_page){	
						prefetch_line(ip, addr, pf_addr, FILL_L2, 0);				
						count++;
					}						
				} 						
			}
		} 
		next_delta = best_delta;
		uint64_t pf_addr = ((addr_n>>LOG2_BLOCK_SIZE)+(best_delta-DC_range_l2c/2)) << LOG2_BLOCK_SIZE;
		addr_n = pf_addr;		
	}
	if (way==-1) {		
		for (int i=0; i<PC_ways_l2c; i++){
			if (PC_NRUbit_l2c[page%PC_sets_l2c][i]==0){
				way=i;
				break;
			}				
		}
		if (way==-1){
			way=0;
			for (int i=0; i<PC_ways_l2c; i++)
				PC_NRUbit_l2c[page%PC_sets_l2c][i]=0;
		}
	}
	if (matched) {
		PC_ldelta_l2c[page%PC_sets_l2c][way]=cur_delta;
	}
	else {	
		PC_ldelta_l2c[page%PC_sets_l2c][way]=0;
	}	
	PC_loffset_l2c[page%PC_sets_l2c][way]=page_offset;
	PC_ptag_l2c[page%PC_sets_l2c][way]=get_page_tag_l2c(page);
	PC_NRUbit_l2c[page%PC_sets_l2c][way]=1;
	
	return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{	
	return metadata_in;	
}


void CACHE::l2c_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L2C pangloss prefetcher final stats" << endl;
}
